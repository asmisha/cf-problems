// Generated by CoffeeScript 1.10.0
(function() {
  var app;

  app = angular.module('cf-problems', ['ui.bootstrap']);

  app.controller('init', [
    '$scope', '$filter', function($scope, $filter) {
      var contests, data, i, j, k, l, len, len1, len2, m, n, ref, ref1, ref2, res, tags;
      contests = {};
      tags = {};
      ref = window.contests.result;
      for (l = 0, len = ref.length; l < len; l++) {
        i = ref[l];
        res = i.name.match(/\(Div\.([^\(\)]*)\)/);
        contests[i.id] = {
          division: res && res[1] ? res[1] : null
        };
      }
      data = window.problems.result;
      ref1 = data.problems;
      for (k = m = 0, len1 = ref1.length; m < len1; k = ++m) {
        i = ref1[k];
        i.solvedCount = data.problemStatistics[k].solvedCount;
        i.contest = contests[i.contestId];
        ref2 = i.tags;
        for (n = 0, len2 = ref2.length; n < len2; n++) {
          j = ref2[n];
          tags[j] = true;
        }
      }
      $scope.tags = Object.keys(tags).sort();
      $scope.problems = data.problems;
      $scope.maxSolvedCount = 1000;
      $scope.currentPage = 1;
      $scope.numPerPage = 30;
      $scope.maxSize = 5;
      $scope.order = ['contestId', 'contestId', 'contestId'];
      $scope.sortOptions = {
        'contestId': 'Contest ID',
        '-contestId': 'Contest ID (reversed)',
        'index': 'Problem Index',
        '-index': 'Problem Index (reversed)',
        'name': 'Name',
        '-name': 'Name (reversed)',
        'points': 'Points',
        '-points': 'Points (reversed)',
        'solvedCount': 'Solved',
        '-solvedCount': 'Solved (reversed)'
      };
      $scope.match = function(v, i, a) {
        var f, ok, ref3, ref4, ref5;
        f = $scope.filter;
        ref3 = f.tags;
        for (k in ref3) {
          i = ref3[k];
          if (i) {
            if (v.tags.indexOf(k) === -1) {
              return false;
            }
          } else {
            delete f.tags[k];
          }
        }
        ok = false;
        ref4 = f.div;
        for (k in ref4) {
          i = ref4[k];
          if (i) {
            if (v.contest.division * 1 === k * 1) {
              ok = true;
            }
          } else {
            delete f.div[k];
          }
        }
        if (!ok && f.div && Object.keys(f.div).length) {
          return false;
        }
        ok = false;
        ref5 = f.index;
        for (k in ref5) {
          i = ref5[k];
          if (i) {
            if (v.index === k) {
              ok = true;
            }
          } else {
            delete f.index[k];
          }
        }
        if (!ok && f.index && Object.keys(f.index).length) {
          return false;
        }
        return true;
      };
      $scope.$watch((function() {
        return $scope.currentPage + ' ' + $scope.numPerPage + ' ' + $scope.maxSize + ' ' + JSON.stringify($scope.filter) + ' ' + JSON.stringify($scope.order);
      }), function() {
        var begin, end;
        begin = ($scope.currentPage - 1) * $scope.numPerPage;
        end = begin + $scope.numPerPage;
        return $scope.filteredProblems = $filter('orderBy')($filter('filter')($scope.problems, $scope.match), $scope.order).slice(begin, end);
      });
      return $scope.filter = {};
    }
  ]);

  app.controller('ranking', [
    '$scope', '$filter', function($scope, $filter) {
      var handle, handles, i, j, k, maxSolved, ref, ref1, ref2, ref3, users;
      $scope.contests = window.contests;
      handles = window.handles;
      users = {};
      ref = $scope.contests;
      for (k in ref) {
        i = ref[k];
        ref1 = i.results;
        for (handle in ref1) {
          j = ref1[handle];
          if (users[handle] == null) {
            users[handle] = {
              total: 0,
              rating: 0
            };
          }
          users[handle].total = users[handle].total * 1 + j.total * 1;
        }
      }
      for (k in contests) {
        i = contests[k];
        maxSolved = 0;
        ref2 = i.results;
        for (handle in ref2) {
          j = ref2[handle];
          maxSolved = Math.max(maxSolved, j.total);
        }
        if (!maxSolved) {
          continue;
        }
        ref3 = i.results;
        for (handle in ref3) {
          j = ref3[handle];
          users[handle].rating = users[handle].rating * 1 + i.weight * j.total / maxSolved;
        }
      }
      $scope.users = (function() {
        var ref4, results;
        results = [];
        for (k in users) {
          i = users[k];
          results.push({
            handle: (ref4 = handles[k.toLowerCase()]) != null ? ref4 : k,
            total: i.total,
            rating: i.rating
          });
        }
        return results;
      })();
      $scope.order = ['-rating', '-total', 'handle'];
      $scope.sortOptions = {
        'rating': 'Rating',
        '-rating': 'Rating (reversed)',
        'total': 'Total AC',
        '-total': 'Total AC (reversed)',
        'handle': 'Handle',
        '-handle': 'Handle (reversed)'
      };
      $scope.filter = {
        type: {}
      };
      $scope.contestMatch = function(v, i, a) {
        var f, ok, ref4;
        f = $scope.filter;
        ok = false;
        ref4 = f.type;
        for (k in ref4) {
          i = ref4[k];
          if (i) {
            if (v.type === k) {
              ok = true;
            }
          } else {
            delete f.type[k];
          }
        }
        if (!ok && f.type && Object.keys(f.type).length) {
          return false;
        }
        return true;
      };
      $scope.$watch((function() {
        return JSON.stringify($scope.filter) + ' ' + JSON.stringify($scope.order);
      }), function() {
        var begin, end;
        begin = ($scope.currentPage - 1) * $scope.numPerPage;
        end = begin + $scope.numPerPage;
        return $scope.orderedUsers = $filter('orderBy')($filter('filter')($scope.problems, $scope.match), $scope.order).slice(begin, end);
      });
      return $scope.$watch((function() {
        return JSON.stringify($scope.filter) + ' ' + JSON.stringify($scope.order);
      }), function() {
        var begin, end;
        begin = ($scope.currentPage - 1) * $scope.numPerPage;
        end = begin + $scope.numPerPage;
        return $scope.orderedUsers = $filter('orderBy')($filter('filter')($scope.problems, $scope.match), $scope.order).slice(begin, end);
      });
    }
  ]);

}).call(this);

//# sourceMappingURL=app.js.map
